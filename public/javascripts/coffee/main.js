// Generated by CoffeeScript 1.9.3
(function() {
  var EventTracker, Events, Showcase,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  World.Widget = (function() {
    Widget.init = function(id, opts) {
      if (opts == null) {
        opts = {};
      }
      this._instances || (this._instances = []);
      return this._instances.push(new this(id, opts));
    };

    function Widget(container, opts1) {
      this.opts = opts1 != null ? opts1 : {};
      this.container = $(container);
      this.key_bindings = [];
      this.global_key_bindings = [];
      this.setup();
    }

    Widget.prototype.trigger = function() {
      var args, evnt, ref;
      evnt = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return (ref = this.container).trigger.apply(ref, [evnt].concat(slice.call(args)));
    };

    Widget.prototype.on = function(evnt, fn) {
      if (!this.container.length) {
        return console.error("event attached to widget with no container");
      }
      return this.container.on(evnt, fn);
    };

    Widget.prototype.before_setup = function() {
      return 1;
    };

    Widget.prototype.ready = function() {
      return 1;
    };

    Widget.prototype.setup_events = function() {
      return 1;
    };

    Widget.prototype.dispatch = function(evnt, map) {
      return this.on(evnt, (function(_this) {
        return function(e) {
          var $el, fn, key, prevent, results;
          $el = $(e.target);
          results = [];
          for (key in map) {
            fn = map[key];
            if ($el.is(key) || $el.hasClass("" + key)) {
              prevent = fn.apply(_this, [$el, e]);
              if (prevent) {
                results.push(e.preventDefault());
              } else {
                results.push(void 0);
              }
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this));
    };

    Widget.prototype.setup = function() {
      this.should_render = false;
      this.before_setup();
      this.setup_events();
      this.setup_key_handlers();
      this.ready();
      return this.render();
    };

    Widget.prototype.bind_key = function(key, fn, global) {
      if (global == null) {
        global = false;
      }
      if (!_.isArray(key)) {
        key = [key];
      }
      if (global) {
        return this.global_key_bindings.push([key, fn]);
      } else {
        return this.key_bindings.push([key, fn]);
      }
    };

    Widget.prototype.setup_key_handlers = function() {
      var fire_key_event;
      fire_key_event = (function(_this) {
        return function(keycode, bindings, e) {
          var binding, i, len;
          for (i = 0, len = bindings.length; i < len; i++) {
            binding = bindings[i];
            if (_.indexOf(binding[0], keycode) > -1) {
              return binding[1].call(_this, e);
            }
          }
          return false;
        };
      })(this);
      if (!_.isEmpty(this.key_bindings)) {
        this.container.on("keydown", (function(_this) {
          return function(e) {
            var prevent;
            prevent = fire_key_event(e.keyCode, _this.key_bindings, e);
            console.log("prevent", prevent);
            if (prevent) {
              return e.preventDefault();
            }
          };
        })(this));
      }
      if (!_.isEmpty(this.global_key_bindings)) {
        return $(document.body).on("keydown", (function(_this) {
          return function(e) {
            var prevent;
            prevent = fire_key_event(e.keyCode, _this.global_key_bindings, e);
            if (prevent) {
              return e.preventDefault();
            }
          };
        })(this));
      }
    };

    Widget.prototype.render = function() {
      if (!this.should_render) {
        return;
      }
      this.should_render = false;
      return true;
    };

    return Widget;

  })();

  Events = {};

  EventTracker = (function() {
    function EventTracker(debug) {
      var _gaq;
      this.debug = debug != null ? debug : false;
      if (typeof _gaq === "undefined" || _gaq === null) {
        _gaq = [];
      }
      this.setup_events();
    }

    EventTracker.prototype.setup_events = function() {
      return $('body').on('click', '[data-track-click-event]', (function(_this) {
        return function(e) {
          return _this.event($(_this).data('track-click-event'));
        };
      })(this));
    };

    EventTracker.prototype.track_event = function(cat, action, value, other) {
      var i, len, track, val;
      track = ['_trackEvent'];
      if (_.isArray(cat)) {
        for (i = 0, len = cat.length; i < len; i++) {
          val = cat[i];
          track.push(val);
        }
      } else {
        if (cat) {
          track.push(cat);
        }
        if (action) {
          track.push(action);
        }
        if (value) {
          track.push(value);
        }
        if (other) {
          track.push(other);
        }
      }
      _gaq.push(track);
      if (this.debug) {
        return console.log(track);
      }
    };

    EventTracker.prototype.event = function(key) {
      if (!_.has(Events, key)) {
        return;
      }
      return this.track_event(Events[key]);
    };

    return EventTracker;

  })();

  $(function() {
    return World.event_tracker = new EventTracker(1);
  });

  World.Project = (function() {
    function Project(data) {
      if (data == null) {
        data = {};
      }
      this.set_data(data);
    }

    Project.prototype.set_data = function(data) {
      if (data == null) {
        data = {};
      }
      return this.data = _.extend({
        title: '',
        description: '',
        images: [],
        display_url: '',
        full_url: ''
      }, data);
    };

    return Project;

  })();

  World.ProjectOverlayView = (function() {
    function ProjectOverlayView(container, projects) {
      this.projects = projects != null ? projects : [];
      this.container = $(container);
      this.overlay = $('#master-overlay').hide();
      this.current_project = 0;
      this.current_image_idx = 0;
      this.open = false;
      this.template = _.template($('#project-overlay-template').html());
      this.setup_events();
    }

    ProjectOverlayView.prototype.setup_events = function() {
      this.overlay.on('click', (function(_this) {
        return function(e) {
          return _this.hide();
        };
      })(this));
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el;
          $el = $(e.target);
          if ($el.is('span')) {
            $el.parent().trigger('click');
            return false;
          }
          if (_.indexOf(['next_image', 'prev_image', 'hide'], $el.data('action')) > -1) {
            e.preventDefault();
          }
          switch ($el.data('action')) {
            case 'hide':
              return _this.hide();
            case 'next_image':
              return _this.cycle_images(1);
            case 'prev_image':
              return _this.cycle_images(-1);
          }
        };
      })(this));
    };

    ProjectOverlayView.prototype.cycle_images = function(dir) {
      var $viewed, $viewing, next_idx, ref;
      if (dir == null) {
        dir = 1;
      }
      if (!this.project) {
        return this.current_image_idx = 0;
      }
      if ((ref = World.event_tracker) != null) {
        ref.track_event('user_action', 'click', 'change_image', (dir > 0 ? 'next' : 'prev'));
      }
      next_idx = this.current_image_idx + dir;
      if (next_idx > this.project.images.length - 1) {
        next_idx = next_idx % this.project.images.length;
      } else if (next_idx < 0) {
        next_idx += this.project.images.length;
      }
      this.current_image_idx = next_idx;
      $viewed = this.images_container.find('.viewing').removeClass('viewing');
      if (dir > 0) {
        $viewed.addClass('viewed');
      }
      $viewing = $(this.images_container.find('img')[this.current_image_idx]).removeClass('viewed').addClass('viewing');
      if ($viewing.height() < 1) {
        $viewing.load((function(_this) {
          return function() {
            return _this.container.find('.images-column').height($viewing.height() + 2);
          };
        })(this));
      } else {
        this.container.find('.images-column').height($viewing.height() + 2);
      }
      return this.current_image_idx;
    };

    ProjectOverlayView.prototype.open_project = function(index) {
      if (index == null) {
        index = 0;
      }
      if (!_.has(this.projects, index)) {
        return false;
      }
      this.current_project = index;
      this.project = this.projects[index];
      window.location.hash = this.project.slug;
      this.current_image_idx = 0;
      this.render();
      this.setup_paddles();
      this.cycle_images(0);
      return this.show();
    };

    ProjectOverlayView.prototype.setup_paddles = function() {
      if (!this.project) {
        return;
      }
      this.paddles.filter('.next').children('a').data('action', 'next_image');
      this.paddles.filter('.prev').children('a').data('action', 'prev_image');
      if (this.project.images.length < 2) {
        return this.paddles.hide();
      } else {
        return this.paddles.show();
      }
    };

    ProjectOverlayView.prototype.show = function() {
      if (this.open) {
        return;
      }
      this.open = true;
      this.overlay.fadeIn();
      return this.container.fadeIn();
    };

    ProjectOverlayView.prototype.hide = function() {
      if (!this.open) {
        return;
      }
      this.open = false;
      window.location.hash = "";
      this.container.fadeOut();
      return this.overlay.fadeOut();
    };

    ProjectOverlayView.prototype.render = function() {
      if (!this.template) {
        return;
      }
      this.container.empty();
      this.container.html(this.template({
        project: this.project
      }));
      this.images_container = this.container.find('.images-container');
      return this.paddles = this.container.find('.paddle');
    };

    return ProjectOverlayView;

  })();

  Showcase = (function() {
    function Showcase(container, opts) {
      if (opts == null) {
        opts = {};
      }
      this.projects_data = opts.projects_data;
      this.first_load = true;
      this.container = $(container);
      this.items = this.container.find('li[data-project]');
      this.setup_projects();
      this.setup_events();
    }

    Showcase.prototype.setup_events = function() {
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el;
          $el = $(e.target);
          if ($el.is('a')) {
            return;
          }
          e.preventDefault();
          if ($el.is('[data-project]')) {
            return _this.open_project_overlay($el.data('project'));
          } else if ($el.closest('[data-project]').length) {
            $el.closest('[data-project]').click();
            return false;
          }
        };
      })(this));
    };

    Showcase.prototype.setup_projects = function() {
      var $li, i, j, len, len1, li, project, ref, ref1;
      this.projects = {};
      ref = this.items;
      for (i = 0, len = ref.length; i < len; i++) {
        li = ref[i];
        $li = $(li);
        this.projects[$li.data('project')] = {};
      }
      ref1 = this.projects_data;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        project = ref1[j];
        if (_.has(this.projects, project.slug)) {
          this.projects[project.slug] = project;
        }
      }
      return this.setup_project_overlay_view();
    };

    Showcase.prototype.setup_project_overlay_view = function() {
      var $first_load;
      this.project_overlay_view = new World.ProjectOverlayView('#project-overlay', this.projects);
      if (this.first_load && window.location.hash.length > 1) {
        $first_load = false;
        return this.open_project_overlay(window.location.hash.replace('#', ''));
      }
    };

    Showcase.prototype.open_project_overlay = function(for_project) {
      var ref;
      if ((ref = World.event_tracker) != null) {
        ref.track_event('user_action', 'click', 'view_project', for_project);
      }
      return this.project_overlay_view.open_project(for_project);
    };

    return Showcase;

  })();

  World.Home = (function(superClass) {
    extend(Home, superClass);

    function Home() {
      return Home.__super__.constructor.apply(this, arguments);
    }

    Home.prototype.before_setup = function() {
      var $a, a, i, len, ref, results;
      this.overlay = $(".overlay").hide();
      this.showcase = new Showcase(this.container.find("#showcase"), this.opts);
      this.contact_form = this.container.find("#contact-form");
      this.contact_submit = this.contact_form.find("input[type=submit]");
      ref = this.container.find("a");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        a = ref[i];
        $a = $(a);
        if ($a.attr('href').search(new RegExp('http(|s):\/\/')) > -1) {
          results.push($a.attr('target', '_blank'));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Home.prototype.setup_events = function() {
      this.dispatch("click", {
        submit_btn: (function(_this) {
          return function(btn) {
            return _this.submit_contact_form();
          };
        })(this)
      });
      return this.bind_key(13, (function(_this) {
        return function(e) {
          if (!$(e.target).is("textarea")) {
            return _this.submit_contact_form();
          }
          return false;
        };
      })(this));
    };

    Home.prototype.reset_contact_form = function() {
      this.contact_form.find('.alert').fadeOut(300);
      this.contact_form.find('input[type=text],textarea').val('');
      return this.contact_submit.val('Send').removeClass('disabled');
    };

    Home.prototype.contact_form_errors = function(data) {
      if (_.isEmpty(data.name)) {
        return "Name is required";
      } else if (_.isEmpty(data.email)) {
        return "Email is required";
      } else if (_.isEmpty(data.message)) {
        return "Message is required";
      } else {
        return false;
      }
    };

    Home.prototype.submit_contact_form = function() {
      var $alert, data, done, errors;
      if (this.contact_submit.is(".disabled")) {
        return;
      }
      this.contact_submit.text("Sending...").addClass("disabled");
      data = {
        name: this.contact_form.find("input[name=name]").val(),
        email: this.contact_form.find("input[name=email]").val(),
        message: this.contact_form.find("textarea[name=message]").val()
      };
      $alert = this.container.find(".alert");
      done = (function(_this) {
        return function(err, message) {
          if (err) {
            $alert.fadeIn().removeClass('alert-success').addClass('alert-error').children('p').text(message);
            _this.contact_submit.val('Try Again');
          } else {
            $alert.fadeIn().removeClass('alert-error').addClass('alert-success').children('p').text(message);
            setTimeout(function() {
              $alert.fadeOut(300);
              return _this.reset_contact_form();
            }, 10000);
          }
          return _this.contact_submit.removeClass("disabled");
        };
      })(this);
      errors = this.contact_form_errors(data);
      if (errors) {
        return done(true, errors);
      }
      this.contact_submit.val('Sending...').addClass("disabled");
      return this.send_message(data, (function(_this) {
        return function(err, msg) {
          return done(err, msg);
        };
      })(this));
    };

    Home.prototype.send_message = function(data, fn) {
      if (fn == null) {
        fn = null;
      }
      return $.ajax({
        type: "post",
        url: "/contact-submit",
        data: data,
        dataType: "json",
        success: (function(_this) {
          return function(msg) {
            if (msg.error) {
              return typeof fn === "function" ? fn(true, msg.message) : void 0;
            } else {
              return typeof fn === "function" ? fn(false, 'Message sent!') : void 0;
            }
          };
        })(this)
      });
    };

    return Home;

  })(World.Widget);

}).call(this);
